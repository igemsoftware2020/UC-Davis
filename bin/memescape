#!/usr/bin/env python3

import os
import sys
import sporecore.motif as sm
import argparse
import math
import statistics


#dnafile optional, pa pc pg pt 
# setup
parser = argparse.ArgumentParser(
	description='Will test MEME parameters on fasta files of promoters.')
parser.add_argument('--jasparfile', required=True, type=str,
	metavar='<str>', help='Path to jaspar directory')
parser.add_argument('--memepath', required=True, type=str,
	metavar='<str>', help='path to meme software')
parser.add_argument('--dnafile', required=False, type=str,
	metavar='<str>', help='fasta file containing promoter DNA')
parser.add_argument('--markov_order', required=False, type=int, default=0,
	metavar='<int>', help='chosen markov order [%(default)i]')
parser.add_argument('--min_w', required=False, type=int, default=6,
	metavar='<int>', help='min width for motifs found by meme[%(default)s]')
parser.add_argument('--max_w', required=False, type=int, default=15,
	metavar='<int>', help='max width for motifs found by meme[%(default)s]')
parser.add_argument('--minpromoterlength', required=False, type=int, 
	default=100,metavar='<int>', help='maximum length of generated promoters\
	 [%(default)i]')
parser.add_argument('--maxpromoterlength', required=False, type=int, 
	default=400,metavar='<int>', help='maximum length of generated promoters\
	 [%(default)i]')
parser.add_argument('--promoterlengthstep', required=False, type=int,
	default=100, metavar='<int>', help='distance between promoter lengths\
	 being tested [%(default)i]')
parser.add_argument('--minnumseq', required=False, type=int, default=5,
	metavar='<int>', help='maximum number of generated promoters \
	[%(default)i]')
parser.add_argument('--maxnumseq', required=False, type=int, default=20,
	metavar='<int>', help='maximum number of generated promoters \
	[%(default)i]')
parser.add_argument('--numseqstep', required=False, type=int, default=5,
	metavar='<int>', help='distance between number of promoter seqs\
	 [%(default)i]')
parser.add_argument('--nummotifs', required=False, type=int, default=1,
	metavar='<int>', help='number of motifs for meme to find [%(default)i]')
parser.add_argument('--numiterations', required=False, type=int, default=1,
	metavar='<int>', help='iterations for condensed data [%(default)i]')
parser.add_argument('--motiffrequency', required=False, type=float, 
	default=0.9, metavar='<float>', help='background probability of A \
	[%(default).3f]')
parser.add_argument('--PA', required=False, type=float, default=0.25,
	metavar='<float>', help='background probability of A [%(default).3f]')
parser.add_argument('--PC', required=False, type=float, default=0.25,
	metavar='<float>', help='background probability of C [%(default).3f]')
parser.add_argument('--PG', required=False, type=float, default=0.25,
	metavar='<float>', help='background probability of G [%(default).3f]')
parser.add_argument('--PT', required=False, type=float, default=0.25,
	metavar='<float>', help='background probability of T [%(default).3f]')
#parser.add_argument('--bothstrands', action='store_true',
#	help='on/off switch')
parser.add_argument('--condenseddata', action='store_true',
	help='on/off switch')
# finalization
arg = parser.parse_args()


assert(math.isclose(arg.PA + arg.PC + arg.PG + arg.PT, 1.0))
assert(arg.motiffrequency <= 1.0)
assert(arg.minpromoterlength <= arg.maxpromoterlength)
assert(arg.numiterations > 0)

def convert_argtovar(minprom, maxprom, promstep, minseq,maxseq,seqstep):
	'''Accepts command line parameter arguments and converts them to ranges of
	parameters to be tested in MEME'''
	promoter = []
	num_seq = []
	for i in range(minprom,maxprom+1,promstep):
		if i != 0:
			promoter.append(i)
	for i in range(minseq,maxseq+1,seqstep):
		if i != 0:
			num_seq.append(i)
	return promoter, num_seq
	

def generate_promoter_mo(dnafile, jasparfile, p, n, o, freq,i): 
	'''Creates a fasta file of promoter sequences with embedded binding motifs.
	Background sequence is generated using markov models of DNA sequence from a
	fasta file input'''
	tmpfile = f'/tmp/testmotif{os.getpid()}_{p}_{n}_{i}.fa' 
	cmd = f'mbed --jasparfile {jasparfile} \
	--dnafile {dnafile} --markov_order {o} --numseq {n} --seqlen {p} --freq \
	{freq} --bothstrands > {tmpfile} '
	os.system(cmd)
	return tmpfile

def generate_promoter_bg(jasparfile, p, n, freq, background,i):
	'''Creates a fasta file of promoter sequences with embedded binding motifs.
	Background sequence is generated using a nucleotide distribution frequency
	input from the command line.'''
	tmpfile = f'/tmp/testmotif{os.getpid()}_{p}_{n}_{i}.fa' 
	cmd = f'mbed --jasparfile {jasparfile} \
	--numseq {n} --seqlen {p} --freq {freq} --PA {background["A"]} --PC \
	{background["C"]} --PG {background["G"]} --PT {background["T"]} \
	--bothstrands > {tmpfile} '
	os.system(cmd)
	return tmpfile
	
def get_memedata(promoter_file, meme_info, j_info, distance_scores, motif_info,jpwm,p,n,m,o,iteration):
	result = []
	fp = 0
	fn = []
	for i in range(len(meme_info)):
		seq = meme_info[i][3]
		motif = meme_info[i][0]
		nsites = meme_info[i][1]
		m_strand = meme_info[i][2]
		m_pos = meme_info[i][4]
		p_val = meme_info[i][5]
		for j in range(len(j_info)):
			if seq == j_info[j][0]:
				j_pos = j_info[j][1][0]
				if j_pos != '':
					j_strand = j_info[j][1][1]
				else:
					j_strand = ''
				break
		for j in range(len(motif_info)):
			if motif == motif_info[j][0]:
				score = distance_scores[j][0] 
				p_score = distance_scores[j][1]
				meme_wid = motif_info[j][1]
				meme_eval = motif_info[j][3]
				break	
		fpos,posdis,fl,overlap,overlap_p = sm.pos_accuracy(m_pos, j_pos,\
		meme_wid,len(jpwm))
		result.append((promoter_file, seq, motif,nsites,m_pos, m_strand,\
		meme_wid,j_pos,j_strand,len(jpwm),p_val,score,p_score,meme_eval,fpos\
		,0,posdis,fl,overlap,overlap_p,p,n,m,o,iteration))
		fn.append(seq)
	return result,fn
	
def find_falsenegs(fn,j_info,p,n,m,o,promoter_file,jpwm,iteration):
	'''Determines which promoters with embedded motifs from the fasta files
	were not detected by meme. '''
	#print('j_info',j_info)
	#print('fn',fn)
	false_negs = []
	for i in range(len(j_info)):
		#print('j_info[i][0]',j_info[i][0])
		#print(fn[i])
		if j_info[i][0] not in fn:
			if j_info[i][1][0] != '':
				#print('is it ""?',j_info[i][1][0])
				false_negs.append(( promoter_file,j_info[i][0],'','','','','',\
				j_info[i][1][0],j_info[i][1][1],len(jpwm),'','','','',0,1,99,1\
				,'','',p,n,m,o,iteration))
	return false_negs	



def find_condensedstats(result,fn,motif_info,j_info,promoter_file,bits,p_bits,\
p,n,m,o,false_neg,numjsites,iteration):
	'''Creates condensed meme results focused on the performance of each motif
	 found in meme '''
	condensed_stats = []
	for i in range(len(motif_info)):
		fl_ct = 0
		fp_ct = 0
		for j in range(len(result)):
			if result[j][2] == motif_info[i][0]:
				nsites = int(result[j][3])
				fl_ct += (result[j][17])
				fp_ct += (result[j][14])
				score = (result[j][11])
				score_p = (result[j][12])
				evalue = (result[j][13])
		condensed_stats.append((promoter_file,motif_info[i][0],nsites,bits,p_bits,\
		evalue,score,score_p,fl_ct/nsites,(nsites-fl_ct)/nsites,\
		fp_ct/nsites,len(false_neg)/numjsites,p,n,m,o,iteration))
	return condensed_stats	


#make sure this is good, make uncondensed have file name
def present_info(promoter_file,results, bits,p_bits,scores,fn,\
	j_info,motif_info,p,n,m,o,condenseddata):
	'''Determines what presentation of data should look like based on the input 
	parameters '''
	present = []
	false_neg = find_falsenegs(fn, j_info,p,n,m,o,promoter_file)
	if condenseddata:
		present = (find_condensedstats(results,fn,motif_info,j_info,\
		promoter_file,bits,p_bits,p,n,m,o))		
	else:
		 for i in range(len(results)):
		 	present.append((results[i]))
		 for i in range(len(false_neg)):
		 	present.append(false_neg[i])
	return present
	


def avg_condensedstats(final,motif_info,p,n,m,o,r):
	'''Averages performance of condensed motif information for a more accurate
	 understanding of motif performance '''
	output = []
	if len(final) > 1:
		for i in range(len(motif_info)):
			mot = motif_info[i][0]
			avg_nsites = []
			avg_score = []
			avg_eval = []
			avg_score = []
			avg_pscore = []
			avg_frate = []
			avg_srate = []
			avg_fprate = []
			avg_fnrate = []
			for j in range(len(final)):
				for k in range(len(final[j])):
					if  mot == final[j][k][1]:
						avg_nsites.append(final[j][k][2])
						avg_eval.append(final[j][k][5])
						avg_score.append(final[j][k][6])
						avg_pscore.append(final[j][k][7])
						avg_frate.append(final[j][k][8])
						avg_srate.append(final[j][k][9])
						avg_fprate.append(final[j][k][10])
						avg_fnrate.append(final[j][k][11])
			output.append((final[j][k][0],mot,statistics.mean(avg_nsites),\
			final[j][k][2],final[j][k][3], statistics.mean(avg_eval),\
			statistics.mean(avg_score), statistics.mean(avg_pscore),\
			statistics.mean(avg_frate), statistics.mean(avg_srate),\
			statistics.mean(avg_fprate),statistics.mean(avg_fnrate),p,n,m,o,\
			r+1,statistics.stdev(avg_eval),statistics.stdev(avg_score)\
			,statistics.stdev(avg_pscore),statistics.stdev(avg_frate),\
			statistics.stdev(avg_srate),statistics.stdev(avg_fprate)\
			,statistics.stdev(avg_fnrate)))
		return output
	else:
		for i in range(len(final)):
			for j in range(len(final[i])):
				output.append(final[i][j])
		return output


if not arg.dnafile:
	assert(arg.markov_order == 0)
	background = {'A':arg.PA,'C':arg.PC,'G':arg.PG,'T':arg.PT}
	
	


#initial conditions and parameter range setup
model = ['zoops','oops','anr']
freq = arg.motiffrequency
iterations = arg.numiterations
maxw = arg.max_w
minw= arg.min_w

promoter,numseq = convert_argtovar(arg.minpromoterlength,\
arg.maxpromoterlength,arg.promoterlengthstep,arg.minnumseq,arg.maxnumseq,\
arg.numseqstep)
o = arg.markov_order


if arg.condenseddata:
	print('promoter_file','motif','number_of_sites','jaspar_file_info',\
	'jaspar_info_percentage','e_val','motif_score','motif_score_percentage',\
	'failure_rate','success_rate','false_positive_rate','false_negative',\
	'promoter_size','number_of_sequences','model','markov_order','iterations'\
	,'stdev(avg_eval)','stdev(avg_score)','stdev(avg_pscore)',\
	'stdev(avg_frate)','stdev(avg_srate)','stdev(avg_fprate)','stdev(avg_fn)'\
	,sep=', ')
else:
	print('file','sequence','motif','number_of_sites','meme_position', 'meme_strand'\
	,'meme_width','j_position','j_strand','j_width','p_value','score',\
	'score_percentage','e_value','false_pos','false_neg','positional_distance'\
	,'fail','overlap','overlap percentage', 'promoter length',\
	'number_of_sequences','model', 'markov_order','iterations',sep=', ')
jpwm = sm.read_JASPAR(arg.jasparfile)
bits, p_bits = sm.score_motifbit(jpwm)
for p in promoter:
	for n in numseq:
		for m in model:
			if arg.condenseddata:
				final = []
			for r in range(iterations):
				if arg.dnafile:
					promoter_file = generate_promoter_mo(arg.dnafile, \
					arg.jasparfile, p, n, o, freq,r+1)
					#background = sm.calcbg_frompromfile(promoter_file)
				else:
					promoter_file = generate_promoter_bg\
					(arg.jasparfile,p,n,freq,background,r+1)
				#print('background',background,'markov_order',arg.markov_order)
				#print(promoter_file)
				j_info, numjsites = sm.read_testmotif(promoter_file)
				motifs, meme_info, motif_info = sm.run_meme\
				(arg.memepath,promoter_file,m,o,arg.nummotifs,maxw,minw)
				scores = sm.performance_bg(jpwm,motifs)
				results, fn = get_memedata(promoter_file,meme_info,j_info,scores,motif_info,jpwm,p,n,m,o,iterations)
				false_neg = find_falsenegs(fn, j_info,p,n,\
				m,o,promoter_file,jpwm,iterations)
				if not arg.condenseddata:
					for i in range(len(results)):
						print(*results[i],sep = ',')
					for i in range(len(false_neg)):
						print(*false_neg[i],sep = ',')
					print('end')
				else:
					final.append(find_condensedstats(results,\
					fn,motif_info,j_info,promoter_file,bits,p_bits,p,n,m,o\
					,false_neg,numjsites,iterations))	
			if arg.condenseddata:
				output = avg_condensedstats(final,motif_info,p\
				,n,m,o,r)
				for i in range(len(output)):
					print(*output[i],sep = ',')
